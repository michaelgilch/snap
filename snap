#!/bin/bash
#
# Window Snapping Utility for Openbox
#
# Makes some assumptions about multi-monitor setups:
# - screens arranged horizontally
# - screens have same resolutions
# - panels are present on every screen, in the same location, and of the same size

WINDOW=0
NUM_MONITORS=0
DIRECTION=""

function usage() {
    echo "Syntax: snap [l|r|u|d]"
    echo "  l  snap left"
    echo "  r  snap right"
    echo "  u  snap up"
    echo "  d  snap down"
    echo 
}

# Sets NUM_MONITORS
function get_monitor_count() {
    NUM_MONITORS=$(xrandr -q | grep -c " connected")
    echo "Num Monitors: $NUM_MONITORS"
}

# Sets the Screen Geometries
#   SCREEN_X_START  starting X coordinate of the primary monitor, not including panels and docks
#   SCREEN_Y_START  starting Y coordinate of the primary monitor, not including panels and docks
#   SCREEN_WIDTH    usable width of each screen, not including panels and docks
#   SCREEN_HEIGHT   usable height of each screen, not including panels and docks
function get_desktop_geometry() {

    # _NET_WORKAREA contains the starting x coordinate, starting y coordinate, width, and height
    # of each desktop workspace.
    # Docks and Panels are taken into account with all 4 values, not including their sizes as 
    # usable realestate.
    # All desktop workspaces should have the same geometries, as far as I know, so we only need
    # the first set of measurements.
    desktop_geom_qry_results=$(xprop -root _NET_WORKAREA | sed 's/,//g' | cut -d' ' -f3-)

    SCREEN_X_START=$(echo "$desktop_geom_qry_results" | cut -d' ' -f1)
    SCREEN_Y_START=$(echo "$desktop_geom_qry_results" | cut -d' ' -f2)
    desktop_width=$(echo "$desktop_geom_qry_results" | cut -d' ' -f3)
    SCREEN_WIDTH=$((desktop_width/NUM_MONITORS))
    SCREEN_HEIGHT=$(echo "$desktop_geom_qry_results" | cut -d' ' -f4)
    
    echo "Desktop Geometry:"
    echo "  X Start: $SCREEN_X_START"
    echo "  Y Start: $SCREEN_Y_START"
    echo "  Width:   $SCREEN_WIDTH"
    echo "  Height:  $SCREEN_HEIGHT"
}

# Sets WINDOW to the active window ID
function get_active_window() {
    WINDOW=$(xdotool getactivewindow)
    echo "Active Window: $WINDOW"
}

function get_window_state() {
    xprop -id "$WINDOW" | grep "_SNAP_STATE" >/dev/null
    if [ $? == 0 ]; then
        echo "Window is already snapped."
        window_state=$(xprop -id "$WINDOW" _SNAP_STATE | sed 's/,//g' | cut -d' ' -f3-)
        let orig_x=$(echo $window_state | cut -d' ' -f1)
        let orig_y=$(echo $window_state | cut -d' ' -f2)
        let orig_w=$(echo $window_state | cut -d' ' -f3)
        let orig_h=$(echo $window_state | cut -d' ' -f4)
        let last_x_quad=$(echo $window_state | cut -d' ' -f5)
        let last_y_quad=$(echo $window_state | cut -d' ' -f6)
        let last_x=$(echo $window_state | cut -d' ' -f7)
        let last_y=$(echo $window_state | cut -d' ' -f8)
        let last_w=$(echo $window_state | cut -d' ' -f9)
        let last_h=$(echo $window_state | cut -d' ' -f10)
        echo "Original Geometry = $orig_x, $orig_y, $orig_w, $orig_h"
        echo "Current Geometry =  $last_x, $last_y, $last_w, $last_h"
    else
        echo "Window is not yet snapped."
        orig_x=$curr_x
        orig_y=$curr_y
        orig_w=$curr_w
        orig_h=$curr_h
        let last_x_quad=0
        let last_y_quad=0
        echo "Original Geometry: $orig_x, $orig_y, $orig_w, $orig_h"
    fi
}

function get_window_monitor() {
    monitor=1
    
    if [ "$orig_x" -gt "$SCREEN_WIDTH" ]; then
        monitor=2
    fi
}

function get_window_geometry() {
    eval $(xwininfo -id "$WINDOW" |
            sed -n -e "s/^ \+Absolute upper-left X: \+\([0-9]\+\).*/x=\1/p" \
                   -e "s/^ \+Absolute upper-left Y: \+\([0-9]\+\).*/y=\1/p" \
                   -e "s/^ \+Width: \+\([0-9]\+\).*/w=\1/p" \
                   -e "s/^ \+Height: \+\([0-9]\+\).*/h=\1/p" \
                   -e "s/^ \+Relative upper-left X: \+\([0-9]\+\).*/b=\1/p" \
                   -e "s/^ \+Relative upper-left Y: \+\([0-9]\+\).*/t=\1/p" )
    
    echo "Current Window Geometry:"
    echo "  Abs X:   $x"
    echo "  Abs Y:   $y"
    echo "  Rel X:   $b"
    echo "  Rel Y:   $t"
    echo "  Width:   $w"
    echo "  Height:  $h"

    let curr_x=$x-$b
    let curr_y=$y-$t
    let curr_w=$w+$b
    let curr_h=$h+$t+$b

    echo "Calcuated Window Geometry:"
    echo "  Curr X:  $curr_x"
    echo "  Curr Y:  $curr_y"
    echo "  Curr W:  $curr_w"
    echo "  Curr H:  $curr_h"
}

function get_window_frame() {
    window_frame=$(xprop -id "$WINDOW" _NET_FRAME_EXTENTS | sed 's/,//g' | cut -d' ' -f3-)
    left_frame=$(echo $window_frame | cut -d' ' -f1)
    right_frame=$(echo $window_frame | cut -d' ' -f2)
    top_frame=$(echo $window_frame | cut -d' ' -f3)
    bottom_frame=$(echo $window_frame | cut -d' ' -f4)

    echo "Window Frame Geometry:"
    echo "  Left:   $left_frame"
    echo "  Right:  $right_frame"
    echo "  Top:    $top_frame"
    echo "  Bottom: $bottom_frame"
}

function reset_stored_geometry() {
    echo "Removing xprop _SNAP_STATE"
    xprop -id "$WINDOW" -remove _SNAP_STATE
}



if [ $# -eq 0 ] || [ $# -gt 1 ]; then
   usage
   exit
fi

case $1 in
    l|r|u|d) DIRECTION="$1"
        ;;
    *)
        usage; exit
        ;;
esac

get_active_window

get_monitor_count
get_desktop_geometry

get_window_geometry
get_window_frame
get_window_state
get_window_monitor


new_x_quad=$last_x_quad
new_y_quad=$last_y_quad

if [ "$DIRECTION" == 'l' ]; then
    let new_x_quad=$last_x_quad-1
elif [ "$DIRECTION" == 'r' ]; then
    let new_x_quad=$last_x_quad+1
elif [ "$DIRECTION" == 'u' ]; then
    let new_y_quad=$last_y_quad+1
elif [ "$DIRECTION" == 'd' ]; then
    let new_y_quad=$last_y_quad-1
fi

if [ $new_x_quad -gt 1 ] || [ $new_x_quad -lt -1 ]; then
    new_x_quad=$last_x_quad
    echo "x out of range"
fi

if [ $new_y_quad -gt 1 ] || [ $new_y_quad -lt -1 ]; then
    new_y_quad=$last_y_quad
    echo "y out of range"
fi

if [ $new_x_quad -eq 0 ] && [ $new_y_quad -eq 0 ]; then
    echo "Returning to original position"
    new_x=$orig_x
    new_y=$orig_y
    let new_w=$orig_w-$b
    let new_h=$orig_h-$top_frame-$bottom_frame
    
    reset_stored_geometry
else
    case $new_x_quad in
        -1)
            let new_x=$SCREEN_X_START
            let new_w=$SCREEN_WIDTH/2-$left_frame-$right_frame
            ;;
        0)
            let new_x=$SCREEN_X_START
            let new_w=$SCREEN_WIDTH-$left_frame-$right_frame
            ;;
        1)
            let new_x=$SCREEN_WIDTH/2+1
            let new_w=$SCREEN_WIDTH/2-$left_frame-$right_frame
            ;;
    esac
    
    case $new_y_quad in 
        -1)
            let new_y=$SCREEN_HEIGHT/2+$top_frame+$bottom_frame+1
            let new_h=$SCREEN_HEIGHT/2-$top_frame-$bottom_frame
            ;;
        0)
            let new_y=$SCREEN_Y_START
            let new_h=$SCREEN_HEIGHT-$top_frame-$bottom_frame-1
            ;;
        1)
            let new_y=$SCREEN_Y_START
            let new_h=$SCREEN_HEIGHT/2-$top_frame-$bottom_frame
            ;;
    esac
    
    get_window_monitor

    if [ "$monitor" == 2 ]; then
        let new_x=$new_x+$SCREEN_WIDTH
    fi

    xprop -id "$WINDOW" -f _SNAP_STATE 32i -set _SNAP_STATE "$orig_x, $orig_y, $orig_w, $orig_h, $new_x_quad, $new_y_quad, $new_x, $new_y, $new_w, $new_h"
fi

echo "Snapping to:"
echo "  Quadrant: $new_x_quad, $new_y_quad"
echo "  New X:    $new_x"
echo "  New Y:    $new_y"
echo "  New W:    $new_w"
echo "  New H:    $new_h"
    
xdotool windowmove "$WINDOW" $new_x $new_y
xdotool windowsize "$WINDOW" $new_w $new_h

get_window_geometry

#!/bin/bash
#
# Window Snapping Utility for Openbox
#
# Makes some assumptions about multi-monitor setups:
# - screens arranged horizontally
# - screens have same resolutions
# - panels are present on every screen, in the same location, and of the same size

# For unassigned variables in get_window_geometry()
# shellcheck disable=SC2154

function usage() {
    echo "Syntax: snap [l|r|t|b]"
    echo "  l  snap to left"
    echo "  r  snap to right"
    echo "  t  snap to top"
    echo "  b  snap to bottom"
    echo 
}

############################################################
# Determines the number of monitors connected to the PC.
#
# GLOBALS:
#   NUM_MONITORS
# ARGS:
#   None
############################################################
function get_monitor_count() {
    NUM_MONITORS=$(xrandr -q | grep -c " connected")
    echo "Num Monitors: $NUM_MONITORS"
}

############################################################
# Determines the geometry of a single monitor (screen).
#
# GLOBALS:
#   SCREEN_X_START  starting X coordinate of the primary monitor, not including panels and docks
#   SCREEN_Y_START  starting Y coordinate of the primary monitor, not including panels and docks
#   SCREEN_WIDTH    usable width of each screen, not including panels and docks
#   SCREEN_HEIGHT   usable height of each screen, not including panels and docks
# ARGS:
#   None
############################################################
function get_desktop_geometry() {

    # _NET_WORKAREA contains the starting x coordinate, starting y coordinate, width, and height
    # of each desktop workspace.
    # Docks and Panels are taken into account with all 4 values, not including their sizes as 
    # usable realestate.
    # All desktop workspaces should have the same geometries, as far as I know, so we only need
    # the first set of measurements.
    local desktop_geom_qry_results=$(xprop -root _NET_WORKAREA | sed 's/,//g' | cut -d' ' -f3-)

    SCREEN_X_START=$(echo "$desktop_geom_qry_results" | cut -d' ' -f1)
    SCREEN_Y_START=$(echo "$desktop_geom_qry_results" | cut -d' ' -f2)
    
    local desktop_width=$(echo "$desktop_geom_qry_results" | cut -d' ' -f3)
    SCREEN_WIDTH=$((desktop_width/NUM_MONITORS))
    SCREEN_HEIGHT=$(echo "$desktop_geom_qry_results" | cut -d' ' -f4)
    
    echo "Desktop Geometry: X=$SCREEN_X_START Y=$SCREEN_Y_START W=$SCREEN_WIDTH H=$SCREEN_HEIGHT"
}

############################################################
# Determines the ID of the Active Window
#
# GLOBALS:
#   WINDOW
# ARGS:
#   None
############################################################
function get_active_window() {
    WINDOW=$(xdotool getactivewindow)
    echo "Active Window: $WINDOW"
}

############################################################
# Determines if window has already been snapped and sets original geometries
#
# GLOBALS:
#   ORIG_X      original unsnapped X position
#   ORIG_Y      original unsnapped Y position
#   ORIG_W      original unsnapped width
#   ORIG_H      original unsnapped height
#   LAST_X      last snapped X position
#   LAST_Y      last snapped Y position
#   LAST_W      last snapped width
#   LAST_H      last snapped height
#   LAST_X_QUAD last x quadrant
#   LAST_Y_QUAD last y quadrant
# ARGS:
#   None
############################################################
function get_window_state() {
    xprop -id "$WINDOW" | grep "_SNAP_STATE" >/dev/null
    # shellcheck disable=SC2181
    if [ $? == 0 ]; then
        # _SNAP_STATE stores original x, y, w, h, last x/y quadrant, and the last x, y, w, and h.
        local window_state=$(xprop -id "$WINDOW" _SNAP_STATE | sed 's/,//g' | cut -d' ' -f3-)

        ORIG_X=$(echo "$window_state" | cut -d' ' -f1)
        ORIG_Y=$(echo "$window_state" | cut -d' ' -f2)
        ORIG_W=$(echo "$window_state" | cut -d' ' -f3)
        ORIG_H=$(echo "$window_state" | cut -d' ' -f4)
        LAST_X_QUAD=$(echo "$window_state" | cut -d' ' -f5)
        LAST_Y_QUAD=$(echo "$window_state" | cut -d' ' -f6)
        LAST_X=$(echo "$window_state" | cut -d' ' -f7)
        LAST_Y=$(echo "$window_state" | cut -d' ' -f8)
        LAST_W=$(echo "$window_state" | cut -d' ' -f9)
        LAST_H=$(echo "$window_state" | cut -d' ' -f10)
        echo "Window is already snapped to Quadrant [$LAST_X_QUAD,$LAST_Y_QUAD]"
    else
        echo "Window is not yet snapped."
        ORIG_X=$CURR_X
        ORIG_Y=$CURR_Y
        ORIG_W=$CURR_W
        ORIG_H=$CURR_H
        LAST_X_QUAD=0
        LAST_Y_QUAD=0
    fi

    # Verify window has not moved manually since last snap
    if [ "$LAST_X" -ne "$CURR_X" ] || [ "$LAST_Y" -ne "$CURR_Y" ] ||
            [ "$LAST_W" -ne "$CURR_W" ] || [ "$LAST_H" -ne "$CURR_H" ]; then
        remove_stored_geometry
        echo "Window is no longer snapped."
        ORIG_X=$CURR_X
        ORIG_Y=$CURR_Y
        ORIG_W=$CURR_W
        ORIG_H=$CURR_H
        LAST_X_QUAD=0
        LAST_Y_QUAD=0
    fi
}

############################################################
# Determines the monitor being used by the window.
#
# GLOBALS:
#   MONITOR
# ARGS:
#   None
############################################################
function get_window_monitor() {
    MONITOR=1
    
    if [ "$ORIG_X" -ge "$SCREEN_WIDTH" ]; then
        MONITOR=2
    fi
}

############################################################
# Determines the current geometry of the Active Window
#
# GLOBALS:
#   CURR_X  current window X position  
#   CURR_Y  current window Y position
#   CURR_W  current window width
#   CURR_H  current window height
# ARGS:
#   None
############################################################
function get_window_geometry() {
    # The most accurate representation of X and Y coordinates I could find is using 
    # xwininfo and calculating based off the absolute and relative positions.
    eval "$(xwininfo -id "$WINDOW" |
            sed -n -e "s/^ \+Absolute upper-left X: \+\([0-9]\+\).*/x=\1/p" \
                   -e "s/^ \+Absolute upper-left Y: \+\([0-9]\+\).*/y=\1/p" \
                   -e "s/^ \+Relative upper-left X: \+\([0-9]\+\).*/a=\1/p" \
                   -e "s/^ \+Relative upper-left Y: \+\([0-9]\+\).*/b=\1/p" \
                   -e "s/^ \+Width: \+\([0-9]\+\).*/w=\1/p" \
                   -e "s/^ \+Height: \+\([0-9]\+\).*/h=\1/p" )"
    
    echo "Current Window Geometry: AbsX=$x AbsY=$y RelX=$a RelY=$b W=$w H=$h"

    # The actual X and Y coordinates of the window need to be calculated by subtracting
    # the relative X and Y coordinates from the Absolute X and Y coordinates.
    CURR_X=$((x-a))
    CURR_Y=$((y-b))

    CURR_W=$w
    CURR_H=$h

    echo "Calcuated Window Geometry: X=$CURR_X Y=$CURR_Y W=$CURR_W H=$CURR_H"
}

############################################################
# Determines the Active Windows borders.
#
# GLOBALS:
#   BORDER_LEFT     the left border size
#   BORDER_RIGHT    the right border size
#   BORDER_TOP      the top border size, including titlebar if existant
#   BORDER_BOTTOM   the bottom border size
# ARGS:
#   None
############################################################
function get_window_borders() {
    # _NET_FRAME_EXTENTS contains the left, right, top, and bottom borders, in that order
    window_frame=$(xprop -id "$WINDOW" _NET_FRAME_EXTENTS | sed 's/,//g' | cut -d' ' -f3-)

    BORDER_LEFT=$(echo "$window_frame" | cut -d' ' -f1)
    BORDER_RIGHT=$(echo "$window_frame" | cut -d' ' -f2)
    BORDER_TOP=$(echo "$window_frame" | cut -d' ' -f3)
    BORDER_BOTTOM=$(echo "$window_frame" | cut -d' ' -f4)

    echo "Window Frame Geometry: Left=$BORDER_LEFT Right=$BORDER_RIGHT Top=$BORDER_TOP Bottom=$BORDER_BOTTOM"
}

############################################################
# Determines new X and Y Quadrants based on direction and current Quadrant.
#
# GLOBALS:
#   DIRECTION
#   NEW_X_QUAD
#   NEW_Y_QUAD
# ARGS:
#   None
############################################################
function get_new_quadrants() {
    if [ "$DIRECTION" == 'l' ]; then
        NEW_X_QUAD=$((LAST_X_QUAD-1))
    elif [ "$DIRECTION" == 'r' ]; then
        NEW_X_QUAD=$((LAST_X_QUAD+1))
    elif [ "$DIRECTION" == 't' ]; then
        NEW_Y_QUAD=$((LAST_Y_QUAD+1))
    elif [ "$DIRECTION" == 'b' ]; then
        NEW_Y_QUAD=$((LAST_Y_QUAD-1))
    fi
    
    if [ "$NEW_X_QUAD" -gt 1 ] || [ "$NEW_X_QUAD" -lt -1 ]; then
        NEW_X_QUAD=$LAST_X_QUAD
        echo "New X Quadrant ($NEW_X_QUAD) is out of range. Continuing to use $LAST_X_QUAD."
    fi
    
    if [ "$NEW_Y_QUAD" -gt 1 ] || [ "$NEW_Y_QUAD" -lt -1 ]; then
        if [ "$NEW_X_QUAD" -eq 0 ] && [ "$NEW_Y_QUAD" -eq 2 ]; then
            echo "New Y Quadrant = 2. Snapping full screen."
        else
            NEW_Y_QUAD=$LAST_Y_QUAD
            echo "New Y Quadrant ($NEW_Y_QUAD) is out of range. Continuing to use $LAST_Y_QUAD."
        fi
    fi
}

############################################################
# Clears any stored _SNAP_STATE Geometry of the Active Window.
#
# GLOBALS:
#   WINDOW
# ARGS:
#   None
############################################################
function remove_stored_geometry() {
    echo "Removing saved xprop _SNAP_STATE"
    xprop -id "$WINDOW" -remove _SNAP_STATE
}

############################################################
# Main
############################################################

if [ $# -ne 1 ]; then
   usage
   exit
fi

DIRECTION=""
case $1 in
    l|r|t|b) 
        DIRECTION="$1"
        ;;
    *)
        usage
        exit
        ;;
esac

WINDOW=0
get_active_window

NUM_MONITORS=0
get_monitor_count

SCREEN_X_START=0
SCREEN_Y_START=0
SCREEN_WIDTH=0
SCREEN_HEIGHT=0
get_desktop_geometry

CURR_X=0
CURR_Y=0
CURR_W=0
CURR_H=0
get_window_geometry

BORDER_LEFT=0
BORDER_RIGHT=0
BORDER_TOP=0
BORDER_BOTTOM=0
get_window_borders

ORIG_X=0
ORIG_Y=0
ORIG_W=0
ORIG_H=0
LAST_X=0
LAST_Y=0
LAST_W=0
LAST_H=0
LAST_X_QUAD=0
LAST_Y_QUAD=0
get_window_state

MONITOR=0
get_window_monitor

NEW_X_QUAD=$LAST_X_QUAD
NEW_Y_QUAD=$LAST_Y_QUAD
get_new_quadrants



if [ "$NEW_X_QUAD" -eq 0 ] && [ "$NEW_Y_QUAD" -eq 0 ]; then
    echo "New Quadrant = [0,0]. Returning to original position."
    new_x=$ORIG_X
    new_y=$ORIG_Y
    new_w=$ORIG_W
    new_h=$ORIG_H
    
    remove_stored_geometry
else
    case $NEW_X_QUAD in
        -1)
            new_x=$SCREEN_X_START
            new_w=$((SCREEN_WIDTH/2-BORDER_LEFT-BORDER_RIGHT))
            ;;
        0)
            new_x=$SCREEN_X_START
            new_w=$((SCREEN_WIDTH-BORDER_LEFT-BORDER_RIGHT))
            ;;
        1)
            new_x=$((SCREEN_WIDTH/2))
            new_w=$((SCREEN_WIDTH/2-BORDER_LEFT-BORDER_RIGHT))
            ;;
    esac
    
    case $NEW_Y_QUAD in 
        -1)
            new_y=$((SCREEN_HEIGHT/2+BORDER_TOP+BORDER_BOTTOM+1))
            new_h=$((SCREEN_HEIGHT/2-BORDER_TOP-BORDER_BOTTOM))
            ;;
        0)
            new_y=$SCREEN_Y_START
            new_h=$((SCREEN_HEIGHT-BORDER_TOP-BORDER_BOTTOM-1))
            ;;
        1)
            new_y=$SCREEN_Y_START
            new_h=$((SCREEN_HEIGHT/2-BORDER_TOP-BORDER_BOTTOM))
            ;;
        2)  # Special case for maximized window
            new_y=$SCREEN_Y_START
            new_h=$((SCREEN_HEIGHT-BORDER_TOP-BORDER_BOTTOM))
            ;;
    esac
    
    get_window_monitor

    if [ "$MONITOR" == 2 ]; then
        new_x=$((new_x+SCREEN_WIDTH))
    fi

    xprop -id "$WINDOW" -f _SNAP_STATE 32i -set _SNAP_STATE "$ORIG_X, $ORIG_Y, $ORIG_W, $ORIG_H, $NEW_X_QUAD, $NEW_Y_QUAD, $new_x, $new_y, $new_w, $new_h"
fi

echo "Snapping to: Quadrant=[$NEW_X_QUAD,$NEW_Y_QUAD] X=$new_x Y=$new_y W=$new_w H=$new_h"
    
xdotool windowsize "$WINDOW" "$new_w" "$new_h"
xdotool windowmove "$WINDOW" "$new_x" "$new_y"

get_window_geometry
